You are a fiscal assistant tasked with creating a multilingual dialogue dataset for a Tunisian tax chatbot called FiscAssistant. Your goal is to generate the maximum question-and-answer (Q&A) pairs for the deadline category, based on the provided fiscal_data_deadline.json file, which contains Tunisian fiscal data for 2025. The pairs will be used to train the chatbot to respond in English, French, Standard Arabic, and Tunisian dialect.

**Instructions**:
1. Read the Entire json File:
   - Analyze the provided json, which contains entries for the deadline category with the schema:
     ```json
     {
       "id": "string (e.g., [category]_001)",
       "category": "[category]",
       "type": "string (e.g., TVA, CIT)",
       "description": {
         "en": "string",
         "fr": "string",
         "ar": "string",
         "tn": "string"
       },
       "value": "string | number | object",
       "applicability": {
         "profile": ["string"],
         "sector": ["string"],
         "effective_date": "string",
         "conditions": "string | null"
       },
       "details": "object | null",
       "source": "string",
       "last_updated": "string"
     }

Use description, value, applicability, and details to generate accurate Q&A pairs.
Generate maximum Q&A Pairs:
Create maximum Q&A pairs for the demanded category.
For each entry in json file, generate 1–2 questions, varying the type:
Query: Direct info requests (e.g., “What’s the TVA rate for restaurants?”).
Calculation: Tax computations (e.g., “Calculate TVA for 1000 TND at 7%”).
Guidance: Step-by-step help (e.g., “How do I fill out the TVA form?”).
Educational: Definitions/FAQs (e.g., “What is IRPP?”).
If the file has fewer entries than needed, create additional pairs using related data or generic questions (e.g., FAQs for educational).
Follow the JSON Schema:
Each Q&A pair must adhere to:
json

{
  "id": "string (e.g., dialogue_001, dialogue_002)",
  "category": "[category]",
  "question": {
    "en": "string",
    "fr": "string",
    "ar": "string",
    "tn": "string"
  },
  "answer": {
    "en": "string",
    "fr": "string",
    "ar": "string",
    "tn": "string"
  },
  "source_entry": "string (e.g., [category]_001) | null",
  "intent": "string (e.g., query_[category], calculate_tax)"
}
Fields:
id: Unique, sequential (e.g., dialogue_001 to dialogue_[target_pairs]).
category: Set to "[category]".
question: Multilingual questions based on the entry.
answer: Multilingual answers sourced from value, details, or description.
source_entry: The id from the json file (e.g., [category]_001).
intent: Classify as query_[category], calculate_tax (for tax_rate, social_security), request_form_guidance (for form), request_legal_steps (for legal_step), or educational_query.
Multilingual Requirements:
Write questions and answers in English first, then translate into:
French: Use formal terms (e.g., “TVA”, “déclaration”).
Standard Arabic: Use official terms (e.g., “الضريبة على القيمة المضافة”).
Tunisian Dialect: Use authentic terms:
TVA: “تڤا”
Declaration: “تصريح”
penalty: “غرامة”
Form: “استمارة”
How: “كيفاش”
What: “شنو”
Company creation: “تأسيس شركة”
Tax: “ضريبة”
Deadline: “آخر أجل”
Ensure tn translations are conversational (e.g., “شنو نسبة تڤا للمطاعم؟”).
Accuracy:
Base answers strictly on the json file (e.g., value for rates, details for form fields).
For calculations, show steps (e.g., “TVA = 1000 × 7 / 100 = 70 TND”).
Cross-reference applicability for context (e.g., “7% for restaurants”).
Each Q&A pair must adhere to this schema:
json

{
  "id": "string (e.g., dialogue_001, dialogue_002)",
  "category": "string (e.g., tax_rate, deadline, greeting)",
  "question": {
    "en": "string (English question)",
    "fr": "string (French question)",
    "ar": "string (Standard Arabic question)",
    "tn": "string (Tunisian dialect question)"
  },
  "answer": {
    "en": "string (English answer)",
    "fr": "string (French answer)",
    "ar": "string (Standard Arabic answer)",
    "tn": "string (Tunisian dialect answer)"
  },
  "source_entry": "string (e.g., tax_rate_001) | null",
  "intent": "string (e.g., query_tax_rate, calculate_tax)"
}
Output:
Return a JSON array with the maximum Q&A pairs.
Ensure valid JSON syntax and UTF-8 encoding for Arabic characters.
Example:
json

[
  {
    "id": "dialogue_001",
    "category": "[category]",
    "question": {
      "en": "[example_query_question]",
      "fr": "...",
      "ar": "...",
      "tn": "..."
    },
    "answer": {
      "en": "...",
      "fr": "...",
      "ar": "...",
      "tn": "..."
    },
    "source_entry": "[category]_001",
    "intent": "query_[category]"
  }
]
Fields:
id: Unique, sequential (e.g., dialogue_001, dialogue_002).
category: Matches json file categories.
question: Multilingual questions based on the entry or generic for greetings.
answer: Multilingual answers sourced from the json file (e.g., value, details) or general knowledge for greetings.
source_entry: The id from the json file (e.g., tax_rate_001) or null for greetings.
intent: Classify the user’s intent (e.g., query_tax_rate, calculate_tax, request_form_guidance).
Constraints:
Do not invent data; use only the json file.
Ensure unique id values starting from dialogue_[start_id].